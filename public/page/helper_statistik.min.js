/*!
 * CirebonWeb (https://cirebonweb.com)
 * Copyright (c) 2023 CirebonWeb
 * Licensed under MIT (https://opensource.org/licenses/MIT)
 */

/**
 * jQuery Plugin: statFetcher
 * Mengambil statistik dari titik akhir yang diberikan dan memperbarui elemen
 * dengan nilai penghitung animasi.
 * Asumsi: elemen yang memiliki kelas 'stat-container' adalah induk dari semua kotak statistik
 * Penggunaan:
 * $('.stat-container').statFetcher({ endpoint: '/admin/statistik/user' });
 */
(function ($) {
    // Helper class untuk logika pengambilan dan pembaruan statistik
    class HelperStatBox {
        /**
         * @param {HTMLElement} element - Elemen DOM untuk melampirkan fungsionalitas pada (the container).
         * @param {Object} options - Plugin konfigurasi options.
         */
        constructor(element, options) {
            this.element = $(element);
            this.options = $.extend({}, HelperStatBox.DEFAULTS, options);
            this.init();
        }

        /**
         * Default options for the plugin.
         * @type {Object}
         */
        static get DEFAULTS() {
            return {
                endpoint: null,
                statSelector: '.stat-value',
                overlaySelector: '.overlay',
                boxSelector: '.small-box, .info-box',
                fetchDelay: 700
            };
        }

        /**
         * Menginisialisasi pengambilan proses.
         */
        init() {
            if (!this.options.endpoint) {
                console.error('StatFetcher: Endpoint is not defined.');
                return;
            }
            setTimeout(() => this.fetchStats(), this.options.fetchDelay);
        }

        /**
         * Mengambil data dari API endpoint.
         * Struktur jQuery's AJAX.
         */
        fetchStats() {
            $.ajax({
                url: this.options.endpoint,
                method: 'GET',
                dataType: 'json'
            })
                .done(data => {
                    this.updateStats(data);
                })
                .fail(() => {
                    this.handleFetchError();
                });
        };

        /**
         * Shows the loading overlay for all statistic boxes in the container.
         */
        showOverlay() {
            // Cari semua small-box di dalam kontainer utama
            this.element.find(this.options.boxSelector).each((i, boxEl) => {
                // Tampilkan overlay di dalam setiap small-box
                $(boxEl).find(this.options.overlaySelector).fadeIn(200);
            });
        }

        /**
         * Metode publik untuk memicu 'refresh' data secara manual.
         * Menampilkan overlay sebelum fetch dimulai.
         */
        refresh() {
            // 1. Tampilkan overlay (loading/spinner)
            this.showOverlay();

            // 2. Lakukan fetch data baru
            setTimeout(() => this.fetchStats(), this.options.fetchDelay);
        }

        /**
         * Memperbarui elemen statistik dengan data yang diambil.
         * Menggunakan versi otomatis yang diperketat:
         * Hanya nilai yang dianggap bilangan bulat (integer) yang dianimasikan.
         * @param {Object} data - The statistics data object.
         */
        updateStats(data) {
            this.element.find(this.options.statSelector).each((i, el) => {
                const $el = $(el);
                const key = $el.data('key');

                const value = data[key] ?? null;

                if (value === null) {
                    $el.text('–');
                } else {
                    // 1. Coba konversi nilai menjadi angka.
                    const numericValue = Number(value);

                    // 2. Cek apakah nilai tersebut adalah bilangan bulat yang valid (misalnya 4, bukan NaN atau 4.5).
                    if (!isNaN(numericValue) && numericValue >= 0) {
                        this.animateCounter($el, numericValue);
                    } else {
                        $el.text(value);
                    }
                }
                this.hideOverlay($el);
            });
        }

        /**
         * Menangani kesalahan selama proses pengambilan.
         */
        handleFetchError() {
            this.element.find(this.options.statSelector).each((i, el) => {
                const $el = $(el);
                $el.text('–');
                this.hideOverlay($el);
            });
        }

        /**
         * Menganimasikan penghitung dari 0 hingga nilai target.
         * @param {jQuery} $el - Objek jQuery untuk elemen yang akan diperbarui.
         * @param {number} target - Jumlah target akhir.
         */
        animateCounter($el, target) {
            const duration = 600; // total durasi animasi (ms)
            const intervalMs = 20; // jeda antar frame (ms)
            const totalFrames = Math.ceil(duration / intervalMs);
            const step = (target - 0) / totalFrames;

            let count = 0;
            const interval = setInterval(() => {
                count += step;
                if (count >= target) {
                    $el.text(target); // tampilkan 2 angka di belakang koma
                    clearInterval(interval);
                } else {
                    // Tampilkan angka sementara dengan 2 digit desimal
                    $el.text(count.toFixed(2));
                }
            }, intervalMs);
        }

        /**
         * Menyembunyikan 'loading overlay' yang terkait dengan 'statistic box'.
         * @param {jQuery} $el - Objek jQuery untuk elemen nilai statistik.
         */
        hideOverlay($el) {
            // Temukan 'box container' terdekat dan kemudian lapisan di dalamnya.
            $el.closest(this.options.boxSelector).find(this.options.overlaySelector).fadeOut(200);
        }
    }

    // Definisi jQuery plugin
    $.fn.HelperStatBox = function (options) {

        // Jika parameter adalah string (misalnya 'refresh')
        if (typeof options === 'string') {
            const args = Array.prototype.slice.call(arguments, 1);
            return this.each(function () {
                const instance = $.data(this, 'plugin_HelperStatBox');
                if (instance && typeof instance[options] === 'function') {
                    instance[options].apply(instance, args);
                }
            });
        }

        // Inisialisasi plugin jika parameter adalah objek (options)
        return this.each(function () {
            if (!$.data(this, 'plugin_HelperStatBox')) {
                $.data(this, 'plugin_HelperStatBox', new HelperStatBox(this, options));
            }
        });
    };
})(jQuery);