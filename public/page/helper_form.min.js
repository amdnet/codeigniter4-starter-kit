/*!
 * CirebonWeb (https://cirebonweb.com)
 * Copyright (c) 2023 CirebonWeb
 * Licensed under MIT (https://opensource.org/licenses/MIT)
 */

// Fungsi kapital awal huruf
$('input.upper').on('input', function () {
    const input = $(this).val();
    if (input.length > 0) {
        const capitalized = input.charAt(0).toUpperCase() + input.slice(1);
        $(this).val(capitalized);
    }
});

// Fungsi untuk validasi email
function IsEmail(email) {
    const regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return regex.test(email);
}

// Menambahkan metode validasi kustom jika plugin jQuery Validate dimuat
if (typeof $.validator !== 'undefined') {
    $.validator.addMethod("customEmail", function (value, element) {
        return IsEmail(value);
    }, "Email tidak valid (contoh: user@example.com)");
}

// Fungsi untuk mereset tampilan validasi form (styling dan pesan error)
function resetFormValidation(target) {
    const $target = $(target);
    const form = $target.find('form')[0];
    if (form) form.reset();

    $target.find('.is-invalid, .is-valid').removeClass('is-invalid is-valid');
    $target.find('.invalid-feedback, .valid-feedback').remove();
}

/**
 * Global Form Helper
 * Objek global untuk mengelola fungsionalitas form.
 * Menggunakan pola "OOP" untuk mengemas helper dan menghindari polusi global scope.
 */
const FormHelper = {
    /**
     * Helper untuk mengecek perubahan pada data form.
     * Menggunakan closure untuk menyimpan data awal form.
     *
     * @param {object} formSelector Elemen form jQuery atau selector string.
     * @returns {{isChanged: function, resetInitial: function}}
     */
    cekFormData: function (formSelector) {
        let $form = $(formSelector);
        if ($form.attr('data-cek') !== 'true') {
            return { isChanged: () => true, resetInitial: () => { } };
        }

        let initialData = {};

        function setInitialData() {
            initialData = {};
            $form.find('input, select, textarea').each(function () {
                let name = $(this).attr('name');
                if (!name) return;
                if ($(this).is(':checkbox, :radio')) {
                    initialData[name] = $(this).is(':checked');
                } else {
                    initialData[name] = $(this).val();
                }
            });
        }

        function checkChanged() {
            let changed = false;
            $form.find('input, select, textarea').each(function () {
                let name = $(this).attr('name');
                if (!name) return;
                let currentVal = $(this).is(':checkbox, :radio') ? $(this).is(':checked') : $(this).val();
                if (currentVal != initialData[name]) {
                    changed = true;
                    return false;
                }
            });

            if (!changed) {
                $form.find(':input').removeClass('is-invalid is-valid');
                Swal.fire({
                    icon: 'info',
                    title: 'Informasi',
                    html: 'Data input tidak ada perubahan. <br> Proses simpan dibatalkan.',
                });
            }
            return changed;
        }

        setInitialData();
        return { isChanged: checkChanged, resetInitial: setInitialData };
    },

    /**
     * Helper untuk menangani respons dari server (sukses/gagal).
     *
     * @param {object} form Elemen form jQuery.
     * @param {object} response Objek respons dari server.
     * @param {object} [options] Parameter opsional untuk aksi setelah sukses.
     * @param {object} [options.$tabelData=null] Elemen tabel data untuk di-reload.
     * @param {object} [options.$modalDiv=null] Elemen modal untuk ditutup.
     * @param {boolean} [options.reload=false] Tentukan apakah halaman harus direload.
     */
    handleResponse: function (form, response, options = {}) {
        // Menetapkan default untuk options, termasuk reload: false
        const finalOptions = {
            formCek: null,
            $tabelData: null,
            $modalDiv: null,
            reload: false,
            ...options // Menimpa default dengan opsi yang diberikan
        };

        if (response.success) {
            Swal.fire({
                icon: 'success',
                title: 'Sukses',
                text: response.messages,
            }).then(() => {
                // Logika Reset data awal form setelah submit sukses
                if (finalOptions.formCek && typeof finalOptions.formCek.resetInitial === 'function') {
                    finalOptions.formCek.resetInitial();
                }

                // Logika DataTables
                if (finalOptions.$tabelData && finalOptions.$tabelData.DataTable) {
                    const dtInstance = options.$tabelData.DataTable();
                    if (dtInstance) {
                        dtInstance.ajax.reload(null, false).draw(false);
                        Beranda.refreshCsrf();
                    }
                }

                // Logika Tutup Modal & Reload Halaman
                if (finalOptions.$modalDiv) { finalOptions.$modalDiv.modal('hide') }
                if (finalOptions.reload) { location.reload() }

                // (options.$modalDiv) ? options.$modalDiv.modal('hide'): location.reload();
            });
        } else {
            // ... Logika penanganan error
            const validator = $(form).data('validator');
            if (validator && typeof response.messages === 'object') {
                validator.showErrors(response.messages);
                Swal.fire({
                    icon: 'error',
                    title: 'Validasi Gagal!',
                    text: 'Silakan periksa kembali input Anda.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Gagal!',
                    text: response.messages,
                });
            }
        }
    },

    /**
     * Menangani pengiriman form via AJAX.
     *
     * @param {object} form Elemen form jQuery.
     * @param {string} $urlController URL tujuan AJAX.
     * @param {object} $btnSubmit Tombol submit jQuery (wajib).
     * @param {object} $btnLoading Tombol loading jQuery (wajib).
     * @param {object} [options] Objek berisi parameter opsional.
     * @param {object} [options.formCek=null] Elemen untuk resetInitial.
     * @param {object} [options.$tabelData=null] Elemen tabel data untuk di-reload.
     * @param {object} [options.$modalDiv=null] Elemen modal untuk ditutup.
     * @param {object} [options.$btnClose=null] Tombol close modal.
     * @param {boolean} [options.reload=false] Reload halaman default=false.
     * @returns {boolean} Selalu mengembalikan false.
     */
    submitForm: function (form, $urlController, $btnSubmit, $btnLoading, options = {}) {
        // 1. Destructure options, termasuk default untuk elemen yang tidak selalu ada.
        // const { $tabelData = null, $modalDiv = null, $btnClose = null } = options;
        const { formCek = null, $tabelData = null, $modalDiv = null, $btnClose = null } = options;

        // 2. Buat objek options baru untuk FormHelper.handleResponse, 
        //    memastikan semua properti (termasuk 'reload') diteruskan.
        const handleOptions = {
            formCek: formCek,
            $tabelData: $tabelData,
            $modalDiv: $modalDiv,
            ...options // Meneruskan properti lain seperti 'reload'
        };

        $.ajax({
            url: $urlController,
            type: 'POST',
            data: $(form).serialize(),
            dataType: 'json',
            beforeSend: function () {
                // Menggunakan implementasi showLoading lokal di submitForm
                $btnSubmit.hide();
                $btnLoading.show();
                if ($btnClose) {
                    $btnClose.hide();
                }
            },
            success: function (response) {
                // Meneruskan seluruh objek handleOptions
                FormHelper.handleResponse(form, response, handleOptions);
            },
            error: function (xhr) {
                let msg = xhr.responseJSON?.message || xhr.responseText || "Terjadi kesalahan saat memproses.";
                Swal.fire("Gagal", msg, "error");
            },
            // tambahan
            complete: function () {
                // Menggunakan implementasi hideLoading lokal di submitForm
                $btnSubmit.show();
                $btnLoading.hide();
                if ($btnClose) { $btnClose.show(); }
            }
        });
        return false;
    },

    /**
     * Fungsi untuk mengatur opsi validasi form
     * Mengembalikan konfigurasi validasi jQuery.validate
     * yang dapat digunakan kembali untuk berbagai jenis form.
     */
    validasiForm: function () {
        return {
            ignore: [],
            errorElement: 'span',
            errorClass: 'invalid-feedback',
            highlight: function (element) {
                $(element).addClass('is-invalid').removeClass('is-valid');
            },
            unhighlight: function (element) {
                $(element).removeClass('is-invalid').addClass('is-valid');
            },
            errorPlacement: function (error, element) {
                const $parent = element.closest('.input-group, .form-group');
                if ($parent.length) {
                    $parent.append(error);
                } else if (element.is('.select') || element.hasClass('select2') || element.hasClass('selectpicker')) {
                    error.insertAfter(element.next());
                } else {
                    error.insertAfter(element);
                }
            },
        };
    },
};