/*!
 * CirebonWeb (https://cirebonweb.com)
 * Copyright (c) 2023 CirebonWeb
 * Licensed under MIT (https://opensource.org/licenses/MIT)
 */

const TabelHelper = {
    /**
     * Menginisialisasi tabel dinamis (DataTables).
     *
     * @param {string} $tabelId Selektor jQuery untuk tabel (mis. '#myTable').
     * @param {string} $tabelUrl URL untuk data AJAX.
     * @param {object} [options] Opsi tambahan untuk DataTables.
     * @returns {object} Instance objek DataTables.
     */
    tabelDinamis: function ($tabelId, $tabelUrl, buttons = [], columnDefs = [], order = [], options = {}) {
        const defaultOptions = {
            dom: '<"row mb-2"<"col-sm-2"B><"col-sm-2"l><"col-sm-8"f>>' +
                '<"row"<"col-sm-12"tr>>' +
                '<"row mt-2"<"col-sm-5"i><"col-sm-7"p>>',
            paging: true,
            searching: true,
            ordering: true,
            info: true,
            autoWidth: false,
            responsive: true,
            ajax: {
                url: $tabelUrl,
                type: 'POST',
                dataType: 'json',
                async: true
            },
            buttons: buttons,
            columnDefs: columnDefs,
            order: order
            // }, options));
        };
        // Menggabungkan opsi default dan opsi tambahan
        return $($tabelId).DataTable($.extend(true, defaultOptions, options));
    },

    /**
     * Mendapatkan indeks kolom berdasarkan nama header.
     *
     * @param {string} tableId ID tabel.
     * @param {string} headerName Nama header yang dicari.
     * @returns {number} Indeks kolom, atau -1 jika tidak ditemukan.
     */
    getColumnIndex: function (tableId, headerName) {
        const table = $("#" + tableId);
        if (table.length === 0) return -1;
        let index = -1;
        table.find("th").each(function (i) {
            if ($.trim($(this).text()) === headerName) {
                index = i;
                return false;
            }
        });
        return index;
    },

    /**
     * Memindahkan elemen filter kustom ke dalam container pencarian DataTables.
     *
     * @param {string} tableId ID tabel.
     * @param {Array<string>} filterSelectors Array of selektor untuk filter kustom.
     */
    tabelFilter: function (tableId, filterSelectors) {
        const container = $("#" + tableId + "_filter.dataTables_filter");
        if (container.length > 0) {
            filterSelectors.forEach(sel => container.append($(sel)));
        }
    },
    
    // --- Fungsi Render untuk Kolom DataTables ---

    /**
     * Fungsi render untuk kolom Rupiah di DataTables.
     * Bergantung pada fungsi lokasiRupiah dari FormatHelper.
     * Contoh penggunaan: { targets: [2], render: TabelHelper.tabelRupiah }
     */
    tabelRupiah: function (data, type) {
        if (!data) return '-';
        return type === 'display' ? 'Rp. ' + FormatHelper.lokasiRupiah(data) : data;
    },

    /**
     * Fungsi render untuk kolom Tanggal di DataTables.
     * Bergantung pada fungsi formatTanggal dari FormatHelper.
     * Contoh penggunaan: { targets: [6, 7], render: TabelHelper.tabelTanggal }
     */
    tabelTanggal: function (data, type) {
        if (!data) return '-';
        return type === 'display' ? FormatHelper.formatTanggal(data) : data;
    },

    /**
     * Fungsi render untuk kolom Tanggal dan Waktu di DataTables.
     * Bergantung pada fungsi formatTanggal dari FormatHelper.
     * Contoh penggunaan: { targets: [6, 7], render: TabelHelper.tabelTanggalWaktu }
     */
    tabelTanggalWaktu: function (data, type) {
        if (!data) return '-';
        if (type !== 'display') return data;
        const [tanggal, waktu] = data.split(' ');
        const formattedTanggal = FormatHelper.formatTanggal(tanggal);
        return `${formattedTanggal} â†’ ${waktu || ''}`;
    },
};